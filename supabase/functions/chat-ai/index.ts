import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL');
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

const supabase = createClient(supabaseUrl!, supabaseServiceKey!);

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Fun√ß√£o para buscar documentos relevantes baseado na consulta do usu√°rio
async function searchRelevantDocuments(userQuery: string) {
  try {
    console.log('Iniciando busca por documentos relevantes para:', userQuery);
    
    // Buscar todos os documentos
    const { data: allDocs, error } = await supabase
      .from('company_documents')
      .select('id, filename, content')
      .limit(100);

    if (error) {
      console.error('Erro ao buscar documentos:', error);
      return 'Nenhum documento encontrado.';
    }

    if (!allDocs || allDocs.length === 0) {
      console.log('Nenhum documento no banco de dados');
      return 'Nenhum documento da empresa foi carregado. Por favor, pe√ßa ao administrador para carregar os documentos oficiais.';
    }

    console.log(`Encontrados ${allDocs.length} documentos para an√°lise`);

    // Palavras-chave da consulta do usu√°rio
    const queryWords = userQuery.toLowerCase()
      .split(/\s+/)
      .filter(word => word.length > 2)
      .filter(word => !['que', 'como', 'para', 'por', 'com', 'sem', 'sob', 'sobre', 'qual', 'onde', 'quando', 'fale', 'me', 'do', 'da', 'de', 'em', 'no', 'na'].includes(word));

    console.log('Palavras-chave extra√≠das:', queryWords);

    // Calcular relev√¢ncia de cada documento
    const docsWithScore = allDocs.map(doc => {
      const content = doc.content.toLowerCase();
      let score = 0;
      
      // Contagem de palavras-chave encontradas
      queryWords.forEach(word => {
        const regex = new RegExp(`\\b${word}\\b`, 'gi');
        const matches = content.match(regex) || [];
        score += matches.length * 10; // Peso para correspond√™ncias exatas
        
        // Busca por palavras parciais (maior flexibilidade)
        if (content.includes(word)) {
          score += 5;
        }
      });

      return { ...doc, score };
    });

    // Ordenar por relev√¢ncia e pegar os mais relevantes
    const relevantDocs = docsWithScore
      .filter(doc => doc.score > 0)
      .sort((a, b) => b.score - a.score)
      .slice(0, 3); // M√°ximo 3 documentos (otimizado para velocidade)

    console.log('Documentos relevantes encontrados:', relevantDocs.map(d => ({ filename: d.filename, score: d.score })));

    if (relevantDocs.length === 0) {
      return `N√£o encontrei informa√ß√µes espec√≠ficas sobre "${userQuery}" nos documentos carregados. Os documentos dispon√≠veis s√£o: ${allDocs.map(d => d.filename).join(', ')}. Tente reformular sua pergunta ou seja mais espec√≠fico.`;
    }

    // Formatar contexto dos documentos mais relevantes (com limite de caracteres)
    const contextDocs = relevantDocs.map(doc => {
      // Limitar cada documento a 3000 caracteres para acelerar o processamento
      const truncatedContent = doc.content.length > 3000 
        ? doc.content.substring(0, 3000) + '\n[... documento truncado para otimizar resposta ...]'
        : doc.content;
      
      return `=== DOCUMENTO: ${doc.filename} (Relev√¢ncia: ${doc.score}) ===\n${truncatedContent}\n=== FIM DO DOCUMENTO ===\n`;
    }).join('\n');

    console.log(`Contexto preparado com ${contextDocs.length} caracteres de ${relevantDocs.length} documentos`);
    
    return contextDocs;
  } catch (error) {
    console.error('Erro na busca de documentos:', error);
    return 'Erro ao processar documentos da empresa.';
  }
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (!openAIApiKey) {
      console.error('OPENAI_API_KEY n√£o configurada');
      throw new Error('OpenAI API key n√£o configurada');
    }

    const requestBody = await req.json();
    const { message, conversationHistory = [] } = requestBody;

    if (!message) {
      throw new Error('Mensagem √© obrigat√≥ria');
    }

    console.log('=== NOVA CONSULTA ===');
    console.log('Mensagem recebida:', message);
    console.log('Hist√≥rico de conversa√ß√£o:', conversationHistory.length, 'mensagens');

    // Buscar documentos relevantes usando RAG
    const relevantContext = await searchRelevantDocuments(message);
    console.log('Contexto encontrado, enviando para OpenAI...');

    // Preparar mensagens com hist√≥rico e contexto
    const systemPrompt = `Voc√™ √© o MAX, assistente virtual da Fiscaltech.

OBJETIVO:
Oferecer suporte confi√°vel, r√°pido e direto sobre processos, condutas, pol√≠ticas e normas internas da empresa, com linguagem acolhedora e humanizada.

SAUDA√á√ÉO PADR√ÉO:
- Para usu√°rios em geral: "Ol√°! Eu sou o Max, seu assistente virtual na Fiscaltech. Como posso te ajudar?"
- Para usu√°rios novos: "Voc√™ √© novo na empresa ou est√° come√ßando em alguma √°rea espec√≠fica? Assim eu consigo te orientar melhor üòä"

REGRAS OBRIGAT√ìRIAS:
1. Use EXCLUSIVAMENTE os documentos oficiais fornecidos abaixo - NUNCA invente informa√ß√µes
2. EM HIP√ìTESE ALGUMA forne√ßa links para download de arquivos, mesmo que internos
3. N√ÉO PODE inventar equipamentos, processos ou exemplos que n√£o estejam expl√≠citos nos documentos
4. N√ÉO busque refer√™ncias na internet - toda resposta deve estar amparada por material oficial

LIMITA√á√ïES DE RESPOSTA - N√ÉO RESPONDA SOBRE:
- Sal√°rios, bonifica√ß√µes, remunera√ß√£o
- Decis√µes de gest√£o
- Dados externos ou n√£o documentados

SEMPRE QUE POSS√çVEL:
- Indique o nome do documento de origem ou √°rea respons√°vel
- Use linguagem simples, cordial e acess√≠vel
- Estimule que o usu√°rio continue a conversa com sugest√µes √∫teis
- SEMPRE cite o documento quando usar informa√ß√£o espec√≠fica

CONTEXTO DOS DOCUMENTOS DA EMPRESA:
${relevantContext}

INSTRU√á√ïES T√âCNICAS:
- Responda sempre em portugu√™s brasileiro
- Substitua $ por S em suas respostas
- Use at√© 2 emojis quando apropriado
- Seja conciso mas completo (3-6 frases quando poss√≠vel)
- Se documento tiver problemas t√©cnicos, informe que precisa ser recarregado`;


    // Construir array de mensagens com hist√≥rico
    const messages = [
      { role: 'system', content: systemPrompt }
    ];

    // Adicionar hist√≥rico de conversa√ß√£o (limitado √†s √∫ltimas 10 mensagens)
    const recentHistory = conversationHistory.slice(-10);
    messages.push(...recentHistory);

    // Adicionar mensagem atual
    messages.push({ role: 'user', content: message });

    console.log('Enviando', messages.length, 'mensagens para OpenAI (incluindo system + hist√≥rico + atual)');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages,
        max_tokens: 500,
        temperature: 0.4,
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('Erro na API OpenAI:', response.status, errorData);
      throw new Error(`Erro na API OpenAI: ${response.status} - ${errorData}`);
    }

    const data = await response.json();
    console.log('Resposta da OpenAI recebida com sucesso');

    // Extrair texto de forma resiliente (modelos novos podem variar o formato)
    const choice = data?.choices?.[0] ?? {};
    const messageContent = choice?.message ?? {};

    function coerceToText(content: any): string {
      if (!content) return '';
      if (typeof content === 'string') return content;
      if (Array.isArray(content)) {
        try {
          return content
            .map((part: any) =>
              typeof part === 'string'
                ? part
                : (part?.text ?? part?.content ?? '')
            )
            .join('')
            .trim();
        } catch (_) {
          return '';
        }
      }
      // √öltimo recurso: stringify seguro
      try {
        return JSON.stringify(content);
      } catch (_) {
        return '';
      }
    }

    let aiResponseText = coerceToText(messageContent.content).trim();

    if (!aiResponseText) {
      console.warn('OpenAI retornou conte√∫do vazio. Dump parcial da escolha:',
        JSON.stringify({ finish_reason: choice.finish_reason, messageKeys: Object.keys(messageContent || {}) }).slice(0, 500)
      );
      aiResponseText = 'N√£o encontrei informa√ß√µes suficientes para responder com precis√£o agora. Tente reformular a pergunta ou ser mais espec√≠fico.';
    }

    const tokensUsed = data?.usage?.total_tokens || 0;

    console.log(`Tokens utilizados: ${tokensUsed}`);
    console.log('=== FIM DA CONSULTA ===');

    return new Response(JSON.stringify({
      response: aiResponseText,
      tokens: tokensUsed
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Erro na fun√ß√£o chat-ai:', error);
    return new Response(JSON.stringify({ 
      error: error.message || 'Erro interno do servidor' 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});